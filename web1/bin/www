#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express:server');
var http = require('http');

/**
 * Get ports from environment and store in Express.
 */

var port1 = normalizePort(process.env.PORT1 || '1234');
var port2 = normalizePort(process.env.PORT2 || '5678');
app.set('port1', port1);
app.set('port2', port2);

/**
 * Create HTTP servers.
 */

var server1 = http.createServer(app);
var server2 = http.createServer(app);

/**
 * Listen on provided ports, on all network interfaces.
 */

server1.listen(port1);
server1.on('error', onError(port1));
server1.on('listening', onListening(server1, port1));

server2.listen(port2);
server2.on('error', onError(port2));
server2.on('listening', onListening(server2, port2));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(port) {
  return function (error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  };
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server, port) {
  return function () {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  };
}

/**
 * Initialize Socket.IO on both servers.
 */

const io1 = require('socket.io')(server1, {
  pingTimeout: 60000,
});

const io2 = require('socket.io')(server2, {
  pingTimeout: 60000,
});

const socket_module = require('../controllers/socket-io');
socket_module.init(io1, app);
socket_module.init(io2, app);
